#!/usr/bin/env python3
import socket
from math import gcd
import os

def phi(n):
    amount = 0        
    for k in range(1, n + 1):
        if gcd(n, k) == 1:
            amount += 1
    return amount

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd_value = b
    return gcd_value, x, y

# Connect to socket
hostname, port = ("2019shell1.picoctf.com", 30962)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((hostname, port))

# Question 1
# Get data
print(s.recv(1024).decode('ascii'))
s.send(b'Y\n')
print(s.recv(1024).decode('ascii'))

# q and p given, asked n; n = p * q
q = 60413
p = 76753
n = p * q
s.send(str.encode(str(n)+'\n'))
data = s.recv(1024).decode('ascii')
print(data)


# Question 2
s.send(b'Y\n')
print(s.recv(1024).decode('ascii'))

# q asked, p and n given
p = 54269
n = 5051846941
q = n / p
s.send(str.encode(str(int(q))+'\n'))
print(s.recv(1024).decode('ascii'))

# Question 3
s.send(b'N\n')
print(s.recv(1024).decode('ascii'))

# Question 4
s.send(b'Y\n')
print(s.recv(1024).decode('ascii'))

q = 66347
p = 12611
n = p * q
totient = 836623060 # phi(n)
s.send(str.encode(str(totient)+'\n'))
print(s.recv(1024).decode('ascii'))

# Question 5
s.send(b'Y\n')
print(s.recv(1024).decode('ascii'))

plaintext = 6357294171489311547190987615544575133581967886499484091352661406414044440475205342882841236357665973431462491355089413710392273380203038793241564304774271529108729717
e = 3
n = 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331
c = pow(plaintext, e, n)
s.send(str.encode(str(c)+'\n'))
print(s.recv(2024).decode('ascii'))

# Question 6
s.send(b'N\n')
print(s.recv(2024).decode('ascii'))

# Question 7
s.send(b'Y\n')
print(s.recv(2024).decode('ascii'))
q = 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559
p = 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637
e = 65537
phi1 = (p-1)*(q-1)
t , d, y = egcd(e,phi1)
s.send(str.encode(str(d)+'\n'))
print(s.recv(2024).decode('ascii'))

# Question 8
s.send(b'Y\n')
print(s.recv(2024).decode('ascii'))
p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
ciphertext = 23016653876847472700856653975636134833816267659423093220825802730311792688015526031010185862796820464000740538663367868273628190558574669769926145909966799940743138330542504400318814444877763931323239980099404303323064601116168860363364840864265724602533013776878867287027908763538326145208488830881872675088750689066949453757107611076477999369848061893166820131477255959664458909576462597878213732662606021276850039344887619097192724271061026030900796808157479658550935169474101799591059725002019677640101543801616541273658841153594862740548434726220958512298690110880142486139412015047636595600919146971517653734739
e = 65537
n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239

os.system("python3 RsaCtfTool/RsaCtfTool.py --uncipher {} -p {} -n {} -e {}".format(ciphertext, p, n, e))

raw = 14311663942709674867122208214901970650496788151239520971623411712977119770832428664762753917
s.send(str.encode(str(raw)+'\n'))
print(s.recv(2024).decode('ascii'))
s.close()

print(bytes.fromhex(hex(raw)[2:]))


